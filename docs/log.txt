*  Specify MVP
*  OOD Design
*  package and type naming
*  change repo name away from swim to interaction
*  change alias to match
o  Start on tiny bit and optimize tooling
    o  Parser
      *  Study and note participle - not worth it 
      *  See how complex by hand parser would be
      *  Revise parser type names
      *  Decide exact parser names and contract by tdd
      o  onward tdd
        *  correct input type for parser?
        *  proper input for test
        *  start coding algo below and check for run to completion
        *  regex for kw, laneoperand, rest
        *  return ParsedLine to Parse() method
        o  switch to kw being constants
        o  lexical validation of what comes back to Parse()
        o  unit test out to just parser features
        o  move on to  build dsl model to return
        o  validation

        o  put in some error handling that knows about line and lin number


----------------------------------------------------------------------------
Manual Parser
----------------------------------------------------------------------------

o  line ds comprises
    o  orgin text, orig line number
    o  kw
    o  lane operands list of 1 or 2 cap letters
    o  msglines (list of strings, one for each line)

o  parse as follows
    o  capture kw and lane operands in one go with tight regex
    o  capture rest with catchall
    o  process rest by
        o  trim
        o  split on pie
        o  trim components

o  post parse validation
    o  capture lane strings in order - ensuring single cap letter
    o  insist lane operands exist as lanes
    o  insist full and dash have two lane operands
    o  insiste that all types except stop has some non empty msglines


