Decision Log
----------------------------------------------------------------------------

This records the reasoning behind changes made, after the point at which
the features and functions and the code design had more or less stabilised.

It aims to inform longer term decision making about further changes, when
the full reasoning behind changes of mind will have been likely forgotten.


1.0  DIAGRAM WIDTH AND TEXT SIZE CHOICES

  1.1  The As-Is Design

The current design requires the diagram width and text height to be specified
by the caller of the API at diagram build time (not at render time). It then
uses the text height as the fundamental sizing unit. All other sizing and
spacing decisions are defined as proportions of the text height.  For example
the width of an ativity box is something like 2 times the font height. Note
that the fundamental premis is that the diagram aspect ratio cannot be
controlled at all - because it is determined by the space consumed vertically
by the diagram synthesis process.

The diagram synthesis process produces an in-memory graphics model, it is only
later that this is rendered into one form or another, and only then is the
coordinate-space necessarily determined. The synthesis process and the graphics
model produced is done entirely with floating-point arithmetic, and therefore
need not be concerned with the diagram size from a fidelity point of view. It
is deterministic (semantically) solely from the ratio of text height to diagram
width, and is scalable without loss of precision.

The only renderer produced so far is rendering to an image file. In this case,
if you specify a small image (say 400 pixels wide), the resolution quality is
very poor with lines looking more fuzzy than could be hoped for even in an
image that small. The implementation uses a library to render the lines / text
etc. using the graphic model's coordinates as-is. It is likely that
considerably better results would be achieved with a more sophisticated
approach whereby the image rendering process first produces an in-memory image
at higher resolution, and then used image-scaling techniques that exploited
re-sampling to scale it down afterwards. Also some of the other rendering
pipelines envisaged are capable of scaling onto the render surface natively -
for example SVG or an HTML canvas.

Experiments have shown that diagrams only look sensible if the ratio of text
height to diagram width is something like 1:100.  There is merit in making the
text a little bit smaller for very dense diagrams with a large number of
lifelines - because it makes it easier for the user to specify labels and
titles that don't overrun into the space of the neighbouring lifeline. The
practical limit of making text smaller is something like 1:200 before it
becomes too small to read. In the opposite case, for a very simple diagram, the
text can be made a bit larger without making it too difficult to choose the
text for labels that fit. And this would be useful if the diagram was being
projected. The practical limit at this end of the spectrum is around 1:50.

  1.2  Improvement

Choosing relative text size is something the diagram creator will find
useful to tweak as they evolve a diagram, and therefore the DSL will be
expanded with a statement like this:

    textsize 10

The number is the reciprocal of the ratio * 100, thus:

    5  = 1:200
    10 = 1:100
    20 = 1:50

The user should be protected from themselves by constraining the input
value between 5 and 20.

From an architectural point of view, the diagram synthesis part of the software
(i.e. the **diag** package) should not expose a diagram width control in their
API, and instead the responsibility for whole-diagram sizing should be carried
by renderers. The **diag** package should keep its notion of the diagram width
private. It would help during development and maintenance if the (otherwise
arbitrary) internal width used was human-relatable. Ideally use 2000 - the size
most often used during development thus far.

Desigining how the renderers will do their scaling job can be deferred, and
will likely differ substantially according to the destinatin render surface.
