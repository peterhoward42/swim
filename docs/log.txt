*  Do the geometry model and test it is good for json or yaml serialisation
*  Refactor parser and improve tests
*  Psuedo code diagram builder
*  Tease out CRC and cf original plans
*  Challenge tests so far wrt recent test guidance
o  Code CRC modules and do package / module / type doc strings.
    *  Define all types with doc strings
    *  Define fields for events
    *  Replace event types with enum / iota
    *  Redefine scanner as poss map[statement][]event
    o  Write a skeleton test for the Creator to drive out
       recursive tdd of what is left in the diag package
    o  How test the modules are mainly just data?

    o  tdd vertical claims
    o  tdd horiz claims
    o  tdd graphics factory 
    o  define diag.Creator
    o  tdd diag.Creator

----------------------------------------------------------------------------
Algo
----------------------------------------------------------------------------

assume some global sizing ratio constants wrt char height: sizing.ratios

init some sizing
    horiz: sizing.Horiz
        lane x
        lane header box width
        box widths
        self loop width
        char width
    vert lane sizing.vert
        lane header box depth
        padding unit
        char height
        self loop height

every statement has graphical mandate: diag.events.LaneHeader etc.

define graphical events like this:
    draw laneheader boxes
    draw label segments
    draw lane timeline
    draw self loop
    start a box
    finish a box
    draw a full or dash line

iterate over all statements diag.Schema
    capture graphical obligation
    capture incremental v headroom consumed sizing.vert.Claims

add similary - finishing up obligations
    for example
        terminating boxes
        interrupting lane time lines to prevent clash with full/dash or
                label

// now we have the scan oriented info we need to build graphics model

have a rendering phase in which the graphical model is built: diag.GraphicsFactory
    iterate through graphical events model
    advance vertical offset according to the claim associated with the
        graphical obligation
    delegate augmenting graphics model to type specific helpers - injecting
        the vertical offset

type specific helpers 
    explode graphical implications into graphics model primitives
    including sizing policy for that type

