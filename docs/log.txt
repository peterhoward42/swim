o  sizer
	*  define sizer as an interface with a new name
	*  rename existing sizer as an implementation
	*  am I on a branch? if not make so
	*  find something that we can unit test with a small implementation
		*  framemaker
	o  work through other bits of diag amenable to being factored out, and
	   using new sizer.
		*  push arrow into its own package
		*  infact move arrow into new geom 
		*  push segment into its own package inside geom too
		*  lifelinegeomh
		*  standardise of given, when, then
      *  boxstate
	  *  new module lifeline.titlebox with only height in so far
	  *  revert given/then/when in favour of method names
	  *  ilzones
	  *  what can we do to dispense with ilzones? (ditch it)
		   doesn't need a dedicated type - so just ditch it
	o  now look again at creator itself for more stripping out
		o  try making a rival creator in diag/api package and see what packages 
		   and modules can be split out, attempting tdd as we go
		 	*  get the whole project to build as a baseline?
			*  fix lint problems
			*  fix width and height
			*  test that just exercises Create method
			*  push show letters behaviour into parser / dsl.Model

	o  wean off reference input?
	o  find other targets to use sizer
	o  decide which of now disparate packages to pull back into diag
	o  fix up all existing places that use old sizer without trying torefactor
	   more than that
	o  commit as sizer change

	o  sizer could be defined as interface, so that then provide 
	   locked down one for tests, and be free to tune over time 
	   without breaking tests
	o  could be defined as single method interface with string
	   dict lookup to allow sparse implementations
	o  could have concrete implemenation that takes sparse
	   dict constructor dict



    o  reduce creator attributes and member methods in favour of DI to 
       methods, so that...
    o  main lifecycle helper methods can be split out to other diag modules,
       leaving diag package (below) as only containing only synthesis
       phases types and methods

        o  the following helper modules should be stdalong packages, with
           private attributes, DI and unit tests:
           o  boxstate
           o  framemaker
           o  ilzones
           o  lifelinegeom
           o  lifelinemaker
           o  segment

        o  come back to creator itself
            o  can creator be split into api and internal?
            o  none of the new methods in creator init should take a 
               creator argument
	o  box state looks like it can be simplified, and could do with a test
	o  arrow could go into something like a plain geom package
	o  design docco, package docco  and readme needs reflecting
               
    o  consider if image regression tests needed - or maybe only canonical?
    o  what happens if you introduce a lifeline late in the script?
    o  what happens if you put title in too late?
    o  question merit of sizer unit test given visual test efficiency
    o  tune settings
    o  Change reference model to make label not too long, and maybe
       be more computer sciency - plus update readme to suit
    o  virgin clone of umli fails create tests because no directory
       to save in - fix when decide on visual image difference testing
	  	o  make similar to stdalone gui would be good to include linting
    o  Lifeline should be different mark space than response line
    o  Web assembly
    o  cli
    o  benchmarks and tuning
    o  ci/cd
        o  circle?
        o  go releases?
    o  resolution and crispness
    o  consumption in the anticipated forms
    o  update readme
    o  design docco
    o  godoc example
    o  cf creately and sequencediag.com differentiate
    o  Todo resurrect regressions tests for images
        o  include tinternet examples?


----------------------------------------------------------------------------
ilzones
----------------------------------------------------------------------------
o  one clear responsibiity is registry
o  another is which lifelines does A->B cross
o  another is which reg claims affect C 
