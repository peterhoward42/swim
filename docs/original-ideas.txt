----------------------------------------------------------------------------
Requirements
----------------------------------------------------------------------------
o  A go package to let you specify an UML Interaction diagram using
   a very minimal DSL, and get back a diagram.
o  Aim for more or less instantaneous performance good enough for
   as-you type realtime feedback.
o  Aim for widely portable ouput diagram formats
o  Aim for compilation as a Web Assembly Component

----------------------------------------------------------------------------
DSL
----------------------------------------------------------------------------

# Describes arrows (full or dashed) in north to south order.
# General form is keyword, operand_word, message word(s).
# Pipe (|) is to split messages onto multiple lines explicitly.

lane A  SL App
lane B  Core Permissions API
lane C  SL Admin API | edit_facilities | endpoint

full AC  edit_facilities( | payload, user_token)
full CB  get_user_permissions( | token)
dash BC  permissions_list
stop B
self C   [has EDIT_FACILITIES permission] | store changes etc
dash CA  status_ok, payload
self C   [no permission]
dash CA  status_not_authorized


----------------------------------------------------------------------------
Separation of concerns
----------------------------------------------------------------------------
o  Lexer
o  Parser
o  Vertical Topology
o  Relative Sizing
o  Geometry builder
o  Rendering

----------------------------------------------------------------------------
Lexer Role
----------------------------------------------------------------------------
o  Split input into lines
o  Split lines into kw, operand, message word/line components
o  Split message into separate line components
o  Split operand into parts, e.g. A,B
o  All the above with reference to full input line and line numer
o  Validation and error handling
o  Queryable or navigable- e.g. lane has self

----------------------------------------------------------------------------
VerticalTopology
----------------------------------------------------------------------------
o  Receives the lexed lines in sequence, at a kw specific handler.
o  Calculates the height requirement for this event
    o  Based on label line count
    o  And event type (*self* arrows are tall)
o  Stores the requirements for each vertical position
o  Ie arrows, strings, box tops / bottoms

----------------------------------------------------------------------------
Relative Sizing
----------------------------------------------------------------------------
o  The style / layout expertize holder

----------------------------------------------------------------------------
Geometry Builder
----------------------------------------------------------------------------
o  Consumes VerticalTopology, RelativeSizing, and Lexer
o  Produces generalised / portable geometry output specification

----------------------------------------------------------------------------
Consider parser packages
----------------------------------------------------------------------------
o  e.g. https://github.com/alecthomas/participle/blob/master/TUTORIAL.md

----------------------------------------------------------------------------
Rendering
----------------------------------------------------------------------------
Consider using https://github.com/llgcode/draw2d
This library provides an object you can render to programmatially, which
can then output to multiple formats

Even better:
https://godoc.org/github.com/fogleman/gg
