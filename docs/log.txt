o  sizer
	o  now look again at creator itself for more stripping out
		o  try making a rival creator in diag/api package and see what packages 
		   and modules can be split out, attempting tdd as we go
			o  interactions maker
				*  switch over nascent scanner code
				*  give it a make method
				*  tdd runs withtout crashing from diag test
				o  switch to tdd of interactions.make method
					*  runs without crashing
					*  with single lifeline produces all the right things
					   in detail
					o  work through other maker tests (see comments)
						*  spacer needs LifelinePitch()
						 

				o  revert to making sure works from diag.Create
				o  what tests possible from diag.Create?
	o  Segment should have constructor to avoid so many warnings about it
	   using unkeyed fields


	o  wean off reference input?
	o  find other targets to use sizer
	o  decide which of now disparate packages to pull back into diag
	o  fix up all existing places that use old sizer without trying torefactor
	   more than that
	o  commit as sizer change

	o  sizer could be defined as interface, so that then provide 
	   locked down one for tests, and be free to tune over time 
	   without breaking tests
	o  could be defined as single method interface with string
	   dict lookup to allow sparse implementations
	o  could have concrete implemenation that takes sparse
	   dict constructor dict



    o  reduce creator attributes and member methods in favour of DI to 
       methods, so that...
    o  main lifecycle helper methods can be split out to other diag modules,
       leaving diag package (below) as only containing only synthesis
       phases types and methods

        o  the following helper modules should be stdalong packages, with
           private attributes, DI and unit tests:
           o  boxstate
           o  framemaker
           o  ilzones
           o  lifelinegeom
           o  lifelinemaker
           o  segment

        o  come back to creator itself
            o  can creator be split into api and internal?
            o  none of the new methods in creator init should take a 
               creator argument
	o  box state looks like it can be simplified, and could do with a test
	o  arrow could go into something like a plain geom package
	o  design docco, package docco  and readme needs reflecting
               
    o  consider if image regression tests needed - or maybe only canonical?
    o  what happens if you introduce a lifeline late in the script?
    o  what happens if you put title in too late?
    o  question merit of sizer unit test given visual test efficiency
    o  tune settings
    o  Change reference model to make label not too long, and maybe
       be more computer sciency - plus update readme to suit
    o  virgin clone of umli fails create tests because no directory
       to save in - fix when decide on visual image difference testing
	  	o  make similar to stdalone gui would be good to include linting
    o  Lifeline should be different mark space than response line
    o  Web assembly
    o  cli
    o  benchmarks and tuning
    o  ci/cd
        o  circle?
        o  go releases?
    o  resolution and crispness
    o  consumption in the anticipated forms
    o  update readme
    o  design docco
    o  godoc example
    o  cf creately and sequencediag.com differentiate
    o  Todo resurrect regressions tests for images
        o  include tinternet examples?


----------------------------------------------------------------------------
ilzones
----------------------------------------------------------------------------
o  one clear responsibiity is registry
o  another is which lifelines does A->B cross
o  another is which reg claims affect C 
